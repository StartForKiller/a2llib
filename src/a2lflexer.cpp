#line 1 "D:/projects/a2llib/src/a2lflexer.cpp"
    #include <cstdint>
    #include <cctype>

#line 5 "D:/projects/a2llib/src/a2lflexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer a2lFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

#ifdef yyalloc
#define a2lalloc_ALREADY_DEFINED
#else
#define yyalloc a2lalloc
#endif

#ifdef yyrealloc
#define a2lrealloc_ALREADY_DEFINED
#else
#define yyrealloc a2lrealloc
#endif

#ifdef yyfree
#define a2lfree_ALREADY_DEFINED
#else
#define yyfree a2lfree
#endif

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

inline int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int a2l:A2lScanner::yylex()

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 215
#define YY_END_OF_BUFFER 216
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1559] =
    {   0,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  216,  214,  213,  213,
      214,  214,  214,  208,  208,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  213,    0,  206,    0,  209,
        0,  212,    0,    0,    0,  210,  208,    0,    0,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,    0,    0,    0,  212,    0,
        0,    0,  210,    0,  210,  207,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,   65,
      205,   70,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,    0,  211,    0,  203,    0,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,   30,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  148,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  181,  183,
      205,  205,  205,  205,    0,    0,    0,    0,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
       85,  205,   90,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  202,    0,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
       37,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,   82,  205,  205,  205,  205,

       92,  205,  205,  205,  205,  205,   97,  205,   99,  205,
      205,  205,  205,  205,  205,  205,  205,  111,  205,  205,
      205,  205,  205,  205,  120,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,    0,
        0,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,   57,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,   83,  205,  205,  205,  205,
      200,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  109,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  130,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  194,  195,    0,    0,  204,  205,  205,
        3,  205,  205,  205,  205,  205,  205,  205,   20,  205,

       28,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,   48,  205,   50,  205,  205,  205,  205,
       58,  205,  205,  205,  205,   69,  205,  205,  205,  205,
      205,  205,  205,   87,  205,  205,    0,  205,   96,  205,
      205,  205,  101,  205,  103,  205,  205,  205,  205,  205,
      205,  112,  205,  205,  205,  124,  125,  121,  122,  123,
      205,  205,  128,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  139,  140,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  169,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,    0,    0,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,   41,  205,  205,  205,
      205,  205,  205,   52,  205,  205,  205,  205,   63,   64,
       60,   61,   62,  205,  205,  205,  205,  205,  205,  205,
      205,  205,    0,  205,  205,  205,  199,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  127,  129,  205,  132,  205,  205,  205,  136,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  165,  205,  205,  168,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,    0,    0,  205,
      205,  205,   12,   16,  205,  205,  205,   19,   25,   26,
      205,   22,   23,   24,  205,  205,   31,  205,  205,  205,
      205,  205,  205,   43,  205,  205,   47,  205,  205,  205,
      205,  205,  205,  205,  205,   71,  205,  205,  205,   81,
      205,  205,  201,  205,  205,  205,  205,  205,  205,   98,
      205,  102,  205,  205,  205,  205,  110,  108,  205,  205,
      205,  205,  131,  133,  205,  205,  205,  205,  205,  146,
      147,  142,  143,  144,  145,  153,  154,  150,  151,  152,

      205,  205,  160,  161,  157,  158,  159,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      190,  205,  205,  205,  197,    0,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
       51,  205,  205,  205,  205,   66,  205,  205,  205,  205,
       84,  205,  205,  205,   91,  205,  205,  205,  205,  104,
      105,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  141,  155,  205,  205,  205,  205,  205,  205,  170,

      205,  205,  205,  173,  205,  205,  205,  205,  205,  205,
      184,  205,  185,  205,  205,  205,  205,  205,  205,  205,
        0,    2,    4,  205,  205,  205,  205,  205,  205,  205,
      205,   17,  205,  205,   21,  205,  205,  205,  205,  205,
      205,   40,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,   73,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  119,  205,  205,
      205,  205,  205,  156,  205,  205,  205,  205,  167,  205,
      205,  149,  205,  176,  177,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,    0,  205,  205,

      205,  205,  205,  205,  205,  205,  205,    1,  205,   29,
      205,  205,  205,  205,   38,  205,   42,  205,  205,  205,
      205,   54,  205,  205,  205,  205,  205,  205,  205,  205,
      205,   88,  205,  205,  205,  205,  205,  106,  205,  116,
      117,  113,  114,  115,  205,  205,  134,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  187,  205,  205,  205,  192,  205,
      198,    5,  205,  205,   10,   11,  205,  205,  205,  205,
       27,  205,  205,  205,   36,  205,  205,  205,  205,   49,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,   93,   95,   94,  205,  107,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  193,  205,  205,  205,  205,  205,
      205,    9,  205,  205,   15,   18,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,   72,
      205,  205,  205,  205,  205,  100,  205,  126,  205,  137,
      205,  205,  205,  205,  205,  205,  172,  205,  205,  205,
      205,  205,  182,  205,  205,  189,  205,  205,  205,  205,
      205,   13,  205,  205,  205,  205,  205,   44,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

       89,  118,  205,  205,  205,  205,  205,  205,  171,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,   14,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,   74,   75,   79,   80,   76,   77,
       78,   86,  205,  205,  205,  205,  164,  205,  205,  205,
      205,  205,  180,  205,  205,  205,  205,  205,  205,  205,
       32,   33,   35,  205,  205,  205,  205,   53,  205,   59,
      205,  205,  135,  138,  205,  205,  205,  205,  205,  205,
      205,  186,  188,  205,  205,  205,  205,  205,  205,   39,
       45,  205,  205,  205,  205,  205,  205,  205,  166,  205,

      205,  205,  179,  205,  205,  205,  205,  205,  205,   46,
      205,  205,  205,  205,  205,  163,  205,  205,  205,  205,
      205,  205,  205,  205,  205,   55,  205,   67,  205,  205,
      205,  205,  205,  205,  205,    6,    7,    8,  205,  205,
       68,  162,  174,  205,  178,  205,  196,   34,  205,  175,
      205,   56,  205,  205,  205,  205,  191,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        5,    6,    7,    1,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   18,   18,    1,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        5,   45,    5,    1,   46,    1,   47,   48,   49,   50,

       51,   47,   52,   53,   54,   53,   53,   55,   53,   56,
       53,   53,   53,   53,   53,   53,   57,   53,   53,   58,
       53,   53,   59,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[60] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    5,    6,    3,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    8,
        8,    8,    9,    8,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,   10,    3,    3,    1,    3,    8,    8,    8,    8,
        9,    3,    3,    3,    3,    3,    3,   10,    1
    } ;

static const flex_int16_t yy_base[1570] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1685, 1686,   58,   60,
       60,   54,   67,   65,   66,   90,   49,   61,   59,   77,
       98,   45, 1661,   61,    0,  116,  117,   57,  105,   65,
      115,  120,   61,   96,   83,  149,  110, 1679, 1679,  144,
     1675,    0, 1629, 1623, 1622,  118,    0,  153,    0,    0,
     1646, 1654, 1648, 1642,  118, 1654, 1645, 1633, 1637, 1631,
     1638, 1648,  139, 1627,  136, 1627,  141, 1627, 1624, 1641,
     1632, 1624, 1621, 1616, 1636, 1620, 1636, 1622, 1620, 1633,

     1632, 1627, 1603,  140, 1605, 1623, 1615, 1624,  142,  159,
      157, 1598, 1612, 1618, 1603, 1617,  148, 1606,  164,  162,
     1605, 1610,  157, 1615,  174,  172,  163, 1599, 1615, 1599,
     1605, 1608, 1594, 1593, 1592,  153, 1621,  198,    0, 1574,
     1575, 1575,  176,  200,  208,    0, 1593, 1586, 1596, 1587,
     1600,  207, 1584, 1580, 1570, 1595, 1591, 1586, 1576, 1587,
     1576,  192, 1563, 1568, 1569, 1587,  188,  210,  210, 1559,
     1571,    0, 1570, 1579, 1555, 1554, 1568, 1567, 1576, 1557,
     1559, 1572, 1561, 1570, 1552, 1552, 1558, 1555, 1549, 1559,
     1539, 1538, 1547, 1536, 1544, 1547,  212, 1546,  217, 1558,

     1540, 1530, 1539, 1542, 1536, 1544, 1549, 1537, 1523, 1545,
     1541, 1520, 1527, 1540, 1531, 1539, 1515, 1522, 1525, 1519,
     1511, 1522, 1535, 1516, 1530, 1520, 1528, 1512, 1513,  210,
     1511, 1509, 1540, 1686, 1491, 1686, 1489, 1497,  215, 1510,
     1503, 1497, 1506, 1502, 1524, 1490,  209,    0, 1489, 1514,
     1514, 1508,  220, 1504, 1494, 1506, 1490, 1504, 1493, 1479,
     1485, 1502, 1490, 1484, 1484, 1489, 1472,  226, 1495, 1480,
     1483,  230, 1474,  227, 1490, 1474, 1477, 1488, 1486, 1470,
     1488, 1468, 1486, 1481, 1464, 1456, 1463, 1469, 1469, 1471,
      227, 1458, 1460, 1465, 1464,  233, 1455, 1450, 1467, 1467,

     1466, 1465, 1456, 1445, 1462, 1438, 1460, 1436, 1445,  239,
     1444, 1441, 1459,    0, 1439, 1430, 1433, 1455,  230, 1427,
     1451,  247, 1441, 1437, 1446, 1447, 1430, 1444, 1419, 1418,
     1444,  255, 1435, 1422, 1454,  199, 1403, 1401, 1417, 1419,
     1432, 1423, 1434, 1406, 1420, 1417, 1403,  246, 1429, 1413,
     1413, 1409, 1423, 1406, 1406, 1395, 1403, 1406, 1402, 1394,
     1390, 1404, 1397, 1403, 1406, 1409, 1403, 1406, 1409, 1394,
     1404, 1406, 1397, 1377, 1400, 1379, 1387, 1400, 1380, 1387,
     1370, 1388,    0, 1368, 1377, 1385, 1373, 1364, 1377, 1389,
     1369, 1369, 1368, 1381, 1376, 1360, 1365, 1377, 1363, 1355,

     1351, 1373, 1362, 1375, 1360, 1365, 1345, 1353, 1353, 1350,
     1364, 1350, 1339, 1345, 1362,  232, 1360, 1355, 1344, 1356,
     1346, 1337, 1330, 1353, 1328, 1350, 1338, 1349, 1349, 1332,
     1331, 1329, 1327, 1329, 1337, 1333, 1331, 1315, 1336, 1336,
     1337, 1321, 1324, 1333,  249, 1321, 1330, 1333, 1328, 1317,
     1330,  281, 1298, 1324, 1309, 1311, 1321, 1305, 1305, 1307,
     1302, 1299, 1315, 1299, 1313, 1298, 1311, 1297, 1313, 1293,
     1284, 1302,  250, 1290, 1297, 1289, 1291, 1305, 1300, 1295,
     1283, 1301, 1296, 1280, 1279, 1273, 1281, 1292, 1283, 1280,
     1280, 1287, 1282, 1262, 1277,    0, 1287, 1274, 1271, 1267,

        0, 1278, 1282, 1265, 1278, 1261,    0, 1271,    0, 1277,
     1258, 1248, 1274, 1268, 1268, 1244, 1259,    0, 1257, 1251,
     1254, 1248, 1257, 1262,    0, 1236, 1262, 1253, 1247, 1246,
     1239, 1244, 1239, 1228, 1254, 1239,  258, 1244, 1247, 1232,
     1246, 1234, 1224, 1232, 1242, 1217, 1216, 1234, 1221, 1227,
     1225, 1234, 1210, 1209, 1224, 1220, 1228, 1218, 1223, 1211,
     1226, 1228, 1219, 1209, 1225, 1212,  261, 1210, 1211,  291,
     1189, 1203, 1192, 1208, 1204, 1208, 1207, 1200, 1199, 1208,
     1193, 1192, 1191, 1198, 1190, 1203, 1186, 1200, 1192, 1184,
     1197, 1200, 1180, 1194, 1186, 1188, 1191, 1171, 1176, 1167,

     1164, 1173, 1176,    0, 1184, 1160, 1159, 1168, 1176, 1177,
     1182, 1178, 1162, 1179, 1158, 1150, 1172, 1162, 1174, 1141,
      294, 1125, 1131, 1102, 1105, 1091,   61,  146,  180,  219,
      267,  269,  273,  270,    0,  259,  257,  272,  286,  292,
      272,  273,  279,  286,  268,  285,  289,  287,  283,  281,
      284,  289,  285,  302,  299,  290,  293,  290,  297,  294,
      312,  295,  289,  301,  317,  300,  304,  311,  321,  324,
      308,  299,  314,  322,  304,  315,  316,  315,  334,  318,
      329,  334,  339,    0,  313,  347,  337, 1686,  325,  325,
        0,  326,  332,  322,  335,  330,  333,  349,  325,  351,

        0,  354,  351,  348,  340,  350,  345,  341,  360,  362,
      350,  360,  351,    0,  358,  340,  364,  348,  370,  352,
        0,  364,  377,  371,  375,    0,  359,  351,  352,  357,
      377,  374,  383,  401,  378,  385,  405,  390,    0,  374,
      387,  373,    0,  386,    0,  391,  392,  397,  394,  386,
      389,    0,  389,  386,  395,    0,    0,    0,    0,    0,
      387,  404,    0,  390,  397,  387,  393,  413,  414,  400,
      396,  400,    0,    0,  410,  392,  393,  417,  418,  396,
      421,  421,  407,  423,  425,  411,  416,    0,  424,  409,
      420,  411,  424,  437,  419,  434,  440,  439,  444,  442,

      439,  428,  437,  449,  435,  451,  442,  429,  449,  434,
      432,  447,  457,  458,  439,  446,  448,  470,  468,  450,
      453,  457,  464,  460,  461,  468,  449,  476,  459,  462,
      467,  463,  469,    0,  483,  482,  458,  483,    0,    0,
        0,    0,    0,  470,  472,  480,  480,  477,  488,  479,
      485,  481,  517,  491,  492,  504, 1686,  492,  502,  488,
      491,  497,  492,  498,  489,  508,  505,  503,  498,  514,
      515,  503,    0,    0,  507,    0,  518,  499,  522,    0,
      508,  502,  522,  536,  539,  515,  516,  542,  527,  529,
      517,    0,  510,  532,    0,  528,  527,  530,  530,  541,

      523,  536,  541,  545,  531,  547,  533,  539,  536,  553,
      539,  565,  552,  564,  552,  572,  566,  563,  572,  562,
      562,  577,  552,    0,  567,  566,  575,    0,    0,    0,
      580,    0,    0,    0,  575,  579,    0,  576,  572,  587,
      565,  579,  577,  568,  569,  570,    0,  571,  586,  590,
      583,  601,  600,  587,  606,    0,  599,  608,  591,    0,
      589,  591, 1686,  604,  609,  596,  596,  597,  605,    0,
      614,    0,  612,  601,  607,  610,    0,    0,  605,  607,
      598,  622,    0,    0,  613,  609,  625,  603,  612,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      629,  614,    0,    0,    0,    0,    0,  617,  621,  628,
      635,  624,  629,  636,  623,  622,  626,  636,  631,  646,
      647,  631,  632,  632,  648,  634,  634,  646,  652,  652,
        0,  649,  639,  659, 1686,  660,  648,  658,  639,  653,
      652,  652,  653,  657,  650,  666,  658,  668,  670,  661,
      650,  659,  679,  664,  678,  678,  666,  680,  685,  669,
        0,  667,  684,  682,  677,  664,  673,  681,  677,  668,
        0,  679,  679,  681,    0,  691,  692,  697,  690,    0,
        0,  683,  700,  678,  701,  684,  696,  689,  706,  699,
      694,    0,    0,  695,  710,  698,  703,  703,  705,    0,

      692,  701,  702,  695,  705,  723,  708,  708,  707,  710,
        0,  721,    0,  726,  717,  728,  721,  720,  721,  719,
      718,    0,    0,  719,  725,  721,  728,  725,  743,  727,
      741,    0,  719,  734,    0,  721,  736,  750,  743,  735,
      733,    0,  749,  755,  733,  755,  755,  756,  744,  763,
      745,  761,  758,  759,  741,  754,  766,  752,  754,  759,
      755,  762,  772,  758,  765,  783,  781,    0,  778,  764,
      767,  781,  782,    0,  769,  785,  783,  778,    0,  780,
      792,    0,  785,    0,    0,  794,  775,  794,  789,  785,
      783,  788,  789,  799,  791,  788,  809,  810,  807,  812,

      815,  808,  812,  815,  809,  795,  805,    0,  797,    0,
      819,  822,  819,  822,    0,  825,    0,  813,  825,  825,
      824,  803,  823,  815,  825,  811,  821,  817,  834,  819,
      827,    0,  832,  828,  818,  824,  831,    0,  827,    0,
        0,    0,    0,    0,  845,  835,    0,  841,  837,  845,
      834,  826,  827,  840,  848,  844,  845,  839,  858,  844,
      843,  849,  858,  857,    0,  839,  854,  841,    0,  867,
     1686,    0,  851,  875,    0,    0,  868,  867,  855,  870,
        0,  874,  864,  859,    0,  866,  874,  874,  865,    0,
      870,  866,  885,  881,  868,  875,  871,  882,  883,  874,

      889,  880,    0,    0,    0,  876,    0,  892,  878,  880,
      880,  888,  874,  891,  886,  890,  892,  887,  880,  889,
      890,  906,  891,  899,    0,  895,  912,  896,  914,  898,
      925,    0,  908,  913,    0,    0,  918,  921,  918,  907,
      923,  928,  925,  910,  912,  930,  925,  930,  908,    0,
      918,  919,  911,  926,  927,    0,  923,    0,  923,    0,
      939,  930,  945,  942,  934,  938,    0,  935,  923,  947,
      940,  936,    0,  935,  941,    0,  949,  953,  960,  965,
      964,    0,  948,  944,  952,  950,  957,    0,  953,  949,
      956,  961,  951,  967,  959,  959,  955,  956,  980,  959,

        0,    0,  971,  967,  976,  958,  978,  980,    0,  984,
      972,  970,  984,  985,  982,  979,  992,  976,  967,  968,
      969,    0,  979,  994,  996,  981,  995,  984, 1002, 1005,
     1004,  992,  992, 1006,    0,    0,    0,    0,    0,    0,
        0,    0, 1010,  994, 1009, 1001,    0, 1003, 1008, 1017,
     1011, 1007,    0, 1019, 1021, 1006, 1016, 1017, 1018, 1019,
        0, 1001,    0, 1005, 1026, 1027, 1015,    0, 1016,    0,
     1026, 1030,    0,    0, 1018, 1017, 1019, 1035, 1031, 1023,
     1023,    0,    0, 1043, 1026, 1041, 1042, 1043, 1029,    0,
        0, 1031, 1042, 1043, 1038, 1035, 1050, 1036,    0, 1054,

     1053, 1039,    0, 1057, 1041, 1057, 1058, 1059, 1060,    0,
     1063, 1048, 1054, 1064, 1050,    0, 1051, 1069, 1064, 1054,
     1066, 1071, 1072, 1073, 1055,    0, 1060,    0, 1061, 1063,
     1064, 1064, 1082, 1081, 1084,    0,    0,    0, 1068, 1080,
        0,    0,    0, 1071,    0, 1073,    0,    0, 1089,    0,
     1084,    0, 1075, 1075, 1087, 1094,    0, 1686, 1115, 1120,
     1128, 1133, 1142, 1152, 1156, 1162, 1163, 1172, 1182
    } ;

static const flex_int16_t yy_def[1570] =
    {   0,
     1558,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1, 1558, 1558, 1558, 1558,
     1559, 1558, 1558, 1560, 1560, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1558, 1559, 1558, 1559, 1562,
     1563, 1564, 1558, 1558, 1558, 1565,   35, 1566, 1567, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1559, 1563, 1568, 1564, 1558,
     1558, 1558, 1565, 1558, 1558, 1567, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1569, 1558, 1558, 1558, 1558, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1569, 1568, 1558, 1558, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1558, 1558, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1558,
     1558, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1558, 1558, 1558, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1558, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1558, 1558, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1558, 1561, 1561, 1561, 1558, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1558, 1558, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1558, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1558, 1558, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1558, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1558, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1558, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,

     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561,    0, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558
    } ;

static const flex_int16_t yy_nxt[1746] =
    {   0,
       28,   29,   30,   31,   28,   28,   32,   32,   28,   33,
       34,   35,   35,   35,   35,   35,   35,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   45,   46,
       47,   48,   49,   50,   45,   51,   52,   53,   54,   55,
       45,   45,   45,   45,   28,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   28,   56,
       56,   56,   56,   58,   60,   60,   60,   60,   60,   60,
       60,   60,   61,   66,   66,   78,   62,   86,   79,   81,
       99,   87,  102,  100,  103,   88,   82,   68,   68,  112,
      117,   80,  104,   83,   84,  113,  129,   89,  743,   85,

      118,  133,   71,  130,   59,  134,   69, 1558,   90,  135,
       91,   72,   92,   58,   63,   68,   68,   64,   93,   73,
       65,   74,   69, 1558,   94,   75,   76,  131,  114,   95,
       96,   77,  132,   97,  105,  109,   98,  119,  106,  110,
       68,  120,  107,  115,  116,  122,  123,  121,  108,  111,
       56,   56,   66,  151,   59,  124,   58,  125,  126,  144,
      144,  160,  127,  152,  167,  128,   68,  744,   68,  161,
      162,  164,  165,  185,  168,  192,  186,  195,  197,  193,
      204,  215,  207,  194,  208,  187,  211,  209,  198,  196,
      205,  221,  218,  223,   68,  212,  219,   59,   68,  224,

      210,  745,  216,  138,  336,  222,  261,  234,  234,  220,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,   68,  243,  254,  255,
      265,  256,  263,  262,  294,  298,  331,  340,  355,  349,
      244,  350,  264,  266,  371,  379,  372,  267,  376,  299,
      295,  397,  300,  403,  746,  332,  429,  296,  356,  418,
      341,  377,  398,  419,  532,  380,  404,  463,  430,  420,
      433,  434,  533,  444,  562,  445,  651,  421,  446,  464,
      591,  465,  570,  570,  563,  447,  448,  592,  652,  593,
      682,  449,  570,  570,  683,  737,  737,  747,  748,  750,

      751,  752,  753,  754,  755,  749,  756,  757,  761,  686,
      762,  763,  764,  765,  766,  767,  768,  687,  769,  770,
      771,  772,  773,  774,  775,  776,  777,  778,  779,  780,
      781,  783,  784,  758,  759,  760,  785,  786,  787,  788,
      789,  791,  792,  793,  794,  795,  796,  782,  790,  797,
      798,  799,  800,  801,  802,  803,  804,  805,  806,  807,
      808,  809,  810,  811,  812,  813,  814,  815,  816,  817,
      818,  819,  820,  821,  822,  823,  824,  825,  826,  827,
      828,  829,  830,  831,  832,  833,  834,  835,  836,  837,
      838,  839,  840,  844,  845,  846,  847,  848,  849,  850,

      851,  852,  853,  853,  855,  856,  737,  737,  858,  859,
      860,  861,  862,  863,  864,  865,  866,  867,  841,  842,
      843,  868,  869,  870,  871,  872,  873,  874,  875,  876,
      877,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      887,  888,  889,  890,  891,  892,  854,  893,  894,  895,
      896,  897,  898,  899,  900,  901,  902,  903,  906,  907,
      908,  909,  910,  857,  911,  912,  913,  904,  914,  915,
      916,  917,  918,  905,  919,  920,  921,  922,  923,  924,
      925,  926,  927,  928,  929,  930,  935,  936,  937,  938,
      939,  940,  941,  942,  943,  944,  945,  946,  947,  948,

      949,  950,  951,  952,  953,  931,  954,  955,  956,  957,
      958,  932,  933,  934,  959,  960,  961,  962,  853,  853,
      964,  966,  967,  968,  969,  970,  971,  972,  973,  974,
      965,  975,  976,  977,  978,  979,  980,  981,  982,  983,
      984,  985,  986,  987,  988,  989, 1001, 1002, 1008, 1009,
      990,  991, 1010,  996,  997, 1011, 1003, 1004, 1012, 1013,
     1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
     1024, 1025, 1026, 1027, 1028,  963,  992,  993,  994,  995,
      998,  999, 1000, 1005, 1006, 1007, 1029, 1030, 1031, 1032,
     1033, 1034, 1035, 1036, 1037, 1038, 1039, 1044, 1045, 1046,

     1040, 1047, 1048, 1041, 1049, 1050, 1042, 1051, 1052, 1053,
     1054, 1055, 1056, 1057, 1058, 1059, 1060, 1043, 1061, 1062,
     1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
     1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
     1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
     1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
     1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1126, 1127, 1128, 1129, 1132, 1133, 1130,
     1134, 1135, 1136, 1137, 1131, 1138, 1139, 1140, 1141, 1142,

     1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
     1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
     1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1214,
     1215, 1216, 1217, 1218, 1219, 1212, 1220, 1221, 1222, 1223,
     1213, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
     1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1245,

     1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
     1256, 1257, 1259, 1260, 1261, 1262, 1263, 1258, 1264, 1265,
     1266, 1267, 1268, 1269, 1242, 1243, 1244, 1270, 1271, 1272,
     1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
     1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
     1293, 1294, 1295, 1296, 1297, 1298, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1299, 1307, 1308, 1309, 1310, 1311, 1312,
     1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
     1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
     1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,

     1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
     1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
     1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
     1373, 1374, 1375, 1376, 1377, 1378, 1379, 1382, 1380, 1383,
     1384, 1381, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
     1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
     1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
     1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
     1433, 1434, 1435, 1436, 1437, 1438, 1442, 1443, 1444, 1445,

     1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
     1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
     1466, 1439, 1440, 1441, 1467, 1468, 1469, 1470, 1471, 1472,
     1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
     1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
     1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
     1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
     1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
     1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
     1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,

     1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
     1553, 1554, 1555, 1556, 1557,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   67,   67,  742,   67,   67,
       70,  741,   70,   70,   70,   70,   70,   70,   60,   60,
      740,   60,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  139,  739,  139,  139,  139,  139,  139,  139,
      139,  139,  143,  738,  143,  145,  145,  736,  145,  146,
      146,  146,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  735,  734,  733,  732,  731,  730,  729,  728,

      727,  726,  725,  724,  723,  722,  721,  720,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      707,  706,  705,  704,  703,  702,  701,  700,  699,  698,
      697,  696,  695,  694,  693,  692,  691,  690,  689,  688,
      685,  684,  681,  680,  679,  678,  677,  676,  675,  674,
      673,  672,  671,  670,  669,  668,  667,  666,  665,  664,
      663,  662,  661,  660,  659,  658,  657,  656,  655,  654,
      653,  650,  649,  648,  647,  646,  645,  644,  643,  642,
      641,  640,  639,  638,  637,  636,  635,  634,  633,  632,
      631,  630,  629,  628,  627,  626,  625,  624,  623,  622,

      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  598,  597,  596,  595,  594,  590,  589,
      588,  587,  586,  585,  584,  583,  582,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  571,  569,  568,
      567,  566,  565,  564,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  531,  530,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,

      513,  512,  511,  510,  509,  508,  507,  506,  505,  504,
      503,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  478,  477,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  467,  466,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  336,
      451,  450,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  432,  431,  428,  427,  426,  425,  424,  423,  422,
      417,  416,  415,  414,  413,  412,  411,  410,  409,  408,
      407,  406,  405,  402,  401,  400,  399,  396,  395,  394,

      393,  392,  391,  390,  389,  388,  387,  386,  385,  384,
      383,  382,  381,  378,  375,  374,  373,  370,  369,  368,
      367,  366,  365,  364,  363,  362,  361,  360,  359,  358,
      357,  354,  353,  352,  351,  348,  347,  346,  345,  344,
      343,  342,  339,  338,  337,  336,  334,  333,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  297,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,

      272,  271,  270,  269,  268,  260,  259,  258,  257,  253,
      252,  251,  250,  249,  248,  247,  246,  245,  242,  241,
      240,  239,  238,  237,  236,  235,  138,  232,  231,  230,
      229,  228,  227,  226,  225,  217,  214,  213,  206,  203,
      202,  201,  200,  199,  191,  190,  189,  188,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  166,  163,  159,  158,  157,  156,
      155,  154,  153,  150,  149,  148,  147,  142,  141,  140,
      138, 1558,  136,  101, 1558,   27, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,

     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558
    } ;

static const flex_int16_t yy_chk[1746] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   29,
       29,   30,   30,   31,   32,   32,   32,   32,   32,   32,
       32,   32,   33,   34,   35,   37,   33,   39,   37,   38,
       42,   39,   44,   42,   44,   39,   38,   34,   35,   48,
       50,   37,   44,   38,   38,   48,   53,   40,  627,   38,

       50,   55,   36,   53,   31,   55,   34,   35,   40,   55,
       40,   36,   40,   57,   33,   34,   35,   33,   40,   36,
       33,   36,   34,   35,   41,   36,   36,   54,   49,   41,
       41,   36,   54,   41,   46,   47,   41,   51,   46,   47,
       66,   51,   46,   49,   49,   52,   52,   51,   46,   47,
       56,   56,   60,   75,   57,   52,  136,   52,   52,   68,
       68,   83,   52,   75,   87,   52,   60,  628,   66,   83,
       83,   85,   85,  104,   87,  109,  104,  110,  111,  109,
      117,  123,  119,  109,  119,  104,  120,  119,  111,  110,
      117,  126,  125,  127,   60,  120,  125,  136,  143,  127,

      119,  629,  123,  138,  336,  126,  167,  138,  336,  125,
      144,  144,  144,  144,  144,  144,  144,  144,  145,  145,
      145,  145,  145,  145,  145,  145,  143,  152,  162,  162,
      169,  162,  168,  167,  197,  199,  230,  239,  253,  247,
      152,  247,  168,  169,  268,  274,  268,  169,  272,  199,
      197,  291,  199,  296,  630,  230,  319,  197,  253,  310,
      239,  272,  291,  310,  416,  274,  296,  348,  319,  310,
      322,  322,  416,  332,  445,  332,  537,  310,  332,  348,
      473,  348,  452,  452,  445,  332,  332,  473,  537,  473,
      567,  332,  570,  570,  567,  621,  621,  631,  632,  633,

      634,  636,  637,  638,  639,  632,  640,  640,  641,  570,
      642,  643,  644,  645,  646,  647,  648,  570,  649,  650,
      651,  652,  653,  654,  655,  656,  657,  658,  659,  660,
      661,  662,  663,  640,  640,  640,  664,  665,  666,  667,
      668,  669,  670,  671,  672,  673,  674,  661,  668,  675,
      676,  677,  678,  679,  680,  681,  682,  683,  685,  686,
      687,  689,  690,  692,  693,  694,  695,  696,  697,  698,
      699,  700,  702,  703,  704,  705,  706,  707,  708,  709,
      710,  711,  712,  713,  715,  716,  717,  718,  719,  720,
      722,  723,  723,  724,  725,  727,  728,  729,  730,  731,

      732,  733,  734,  734,  735,  736,  737,  737,  738,  740,
      741,  742,  744,  746,  747,  748,  749,  750,  723,  723,
      723,  751,  753,  754,  755,  761,  762,  764,  765,  766,
      767,  768,  769,  770,  771,  772,  775,  776,  777,  778,
      779,  780,  781,  782,  783,  784,  734,  785,  786,  787,
      789,  790,  791,  792,  793,  794,  794,  794,  795,  796,
      797,  798,  799,  737,  800,  801,  802,  794,  803,  804,
      805,  806,  807,  794,  808,  809,  810,  811,  812,  813,
      814,  815,  816,  817,  818,  818,  819,  820,  821,  822,
      823,  824,  825,  826,  827,  828,  829,  830,  831,  832,

      833,  835,  836,  837,  838,  818,  844,  845,  846,  847,
      848,  818,  818,  818,  849,  850,  851,  852,  853,  853,
      854,  855,  856,  858,  859,  860,  861,  862,  863,  864,
      854,  865,  866,  867,  868,  869,  870,  871,  872,  875,
      877,  878,  879,  881,  882,  883,  886,  887,  889,  890,
      884,  884,  891,  885,  885,  893,  888,  888,  894,  896,
      897,  898,  899,  900,  901,  902,  903,  904,  905,  906,
      907,  908,  909,  910,  911,  853,  884,  884,  884,  884,
      885,  885,  885,  888,  888,  888,  912,  913,  914,  915,
      916,  917,  918,  919,  920,  921,  922,  923,  925,  926,

      922,  927,  931,  922,  935,  936,  922,  938,  939,  940,
      941,  942,  943,  944,  945,  946,  948,  922,  949,  950,
      951,  952,  953,  954,  955,  957,  958,  959,  961,  962,
      964,  965,  966,  967,  968,  969,  971,  973,  974,  975,
      976,  979,  980,  981,  982,  985,  986,  987,  988,  989,
     1001, 1002, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
     1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1037,
     1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1044,
     1047, 1048, 1049, 1050, 1044, 1051, 1052, 1053, 1054, 1055,

     1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066,
     1067, 1068, 1069, 1070, 1072, 1073, 1074, 1076, 1077, 1078,
     1079, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
     1091, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103,
     1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1114, 1115,
     1116, 1117, 1118, 1119, 1120, 1121, 1124, 1125, 1126, 1127,
     1128, 1129, 1130, 1131, 1133, 1134, 1136, 1137, 1138, 1139,
     1140, 1141, 1143, 1144, 1145, 1138, 1146, 1147, 1148, 1149,
     1138, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
     1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1166, 1167,

     1169, 1170, 1171, 1172, 1173, 1175, 1176, 1177, 1178, 1180,
     1181, 1183, 1186, 1187, 1188, 1189, 1190, 1183, 1191, 1192,
     1193, 1194, 1195, 1196, 1166, 1166, 1166, 1197, 1198, 1199,
     1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1209, 1211,
     1212, 1213, 1214, 1216, 1218, 1219, 1220, 1221, 1222, 1223,
     1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234,
     1235, 1236, 1237, 1229, 1239, 1245, 1246, 1248, 1249, 1250,
     1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
     1261, 1262, 1263, 1264, 1266, 1267, 1268, 1270, 1273, 1274,
     1277, 1278, 1279, 1280, 1282, 1283, 1284, 1286, 1287, 1288,

     1289, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
     1300, 1301, 1302, 1306, 1308, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1326, 1327, 1328, 1329, 1330, 1331, 1333, 1331, 1334,
     1337, 1331, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
     1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1357,
     1359, 1361, 1362, 1363, 1364, 1365, 1366, 1368, 1369, 1370,
     1371, 1372, 1374, 1375, 1377, 1378, 1379, 1380, 1381, 1383,
     1384, 1385, 1386, 1387, 1389, 1390, 1391, 1392, 1393, 1394,
     1395, 1396, 1397, 1398, 1399, 1399, 1400, 1403, 1404, 1405,

     1406, 1407, 1408, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
     1417, 1418, 1419, 1420, 1421, 1423, 1424, 1425, 1426, 1427,
     1428, 1399, 1399, 1399, 1429, 1430, 1431, 1432, 1433, 1434,
     1443, 1444, 1445, 1446, 1448, 1449, 1450, 1451, 1452, 1454,
     1455, 1456, 1457, 1458, 1459, 1460, 1462, 1464, 1465, 1466,
     1467, 1469, 1471, 1472, 1475, 1476, 1477, 1478, 1479, 1480,
     1481, 1484, 1485, 1486, 1487, 1488, 1489, 1492, 1493, 1494,
     1495, 1496, 1497, 1498, 1500, 1501, 1502, 1504, 1505, 1506,
     1507, 1508, 1509, 1511, 1512, 1513, 1514, 1515, 1517, 1518,
     1519, 1520, 1521, 1522, 1523, 1524, 1525, 1527, 1529, 1530,

     1531, 1532, 1533, 1534, 1535, 1539, 1540, 1544, 1546, 1549,
     1551, 1553, 1554, 1555, 1556, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1559, 1559, 1559, 1560, 1560,  626, 1560, 1560,
     1561,  625, 1561, 1561, 1561, 1561, 1561, 1561, 1562, 1562,
      624, 1562, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1564,  623, 1564, 1564, 1564, 1564, 1564, 1564,
     1564, 1564, 1565,  622, 1565, 1566, 1566,  620, 1566, 1567,
     1567, 1567, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569,  619,  618,  617,  616,  615,  614,  613,  612,

      611,  610,  609,  608,  607,  606,  605,  603,  602,  601,
      600,  599,  598,  597,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      569,  568,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  524,  523,  522,  521,  520,  519,  517,  516,
      515,  514,  513,  512,  511,  510,  508,  506,  505,  504,

      503,  502,  500,  499,  498,  497,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  451,  450,
      449,  448,  447,  446,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  419,
      418,  417,  415,  414,  413,  412,  411,  410,  409,  408,
      407,  406,  405,  404,  403,  402,  401,  400,  399,  398,

      397,  396,  395,  394,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  335,
      334,  333,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  321,  320,  318,  317,  316,  315,  313,  312,  311,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  295,  294,  293,  292,  290,  289,  288,

      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  273,  271,  270,  269,  267,  266,  265,
      264,  263,  262,  261,  260,  259,  258,  257,  256,  255,
      254,  252,  251,  250,  249,  246,  245,  244,  243,  242,
      241,  240,  238,  237,  235,  233,  232,  231,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  211,  210,  209,  208,
      207,  206,  205,  204,  203,  202,  201,  200,  198,  196,
      195,  194,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  183,  182,  181,  180,  179,  178,  177,  176,

      175,  174,  173,  171,  170,  166,  165,  164,  163,  161,
      160,  159,  158,  157,  156,  155,  154,  153,  151,  150,
      149,  148,  147,  142,  141,  140,  137,  135,  134,  133,
      132,  131,  130,  129,  128,  124,  122,  121,  118,  116,
      115,  114,  113,  112,  108,  107,  106,  105,  103,  102,
      101,  100,   99,   98,   97,   96,   95,   94,   93,   92,
       91,   90,   89,   88,   86,   84,   82,   81,   80,   79,
       78,   77,   76,   74,   73,   72,   71,   65,   64,   63,
       61,   59,   58,   43,   27, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,

     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[216] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 
    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,     };

static const flex_int16_t yy_rule_linenum[215] =
    {   0,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
      106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
      116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,

      146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
      156,  157,  158,  159,  160,  161,  162,  163,  164,  165,
      166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
      179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
      199,  200,  201,  202,  203,  204,  205,  206,  207,  208,
      209,  210,  211,  212,  213,  214,  215,  216,  217,  218,
      219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
      229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      239,  240,  241,  242,  243,  244,  246,  254,  261,  268,

      275,  277,  278,  280,  286,  294,  305,  353,  363,  373,
      384,  385,  386,  387
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "D:/projects/a2llib/src/a2lflexer.l"

#line 7 "D:/projects/a2llib/src/a2lflexer.l"
    #include "a2lscanner.h"
    #undef  YY_DECL
    #define YY_DECL int a2l::A2lScanner::a2llex(a2l::A2lParser::value_type* yy_value)
    using token = a2l::A2lParser::token;
#line 1462 "D:/projects/a2llib/src/a2lflexer.cpp"
#define YY_NO_UNISTD_H 1
#define YY_NO_INPUT 1
#line 34 "D:/projects/a2llib/src/a2lflexer.l"
            /* \"([^\"\\]|(\\.))*\" */

#line 1468 "D:/projects/a2llib/src/a2lflexer.cpp"

#define INITIAL 0
#define PRI 1
#define VERSION 2
#define TIMESTAMP 3
#define HOSTNAME 4
#define APPNAME 5
#define PROCID 6
#define MSGID 7
#define SD 8
#define SDELEMENT 9
#define SDPAR 10
#define SDVALUE 11
#define MSG 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 40 "D:/projects/a2llib/src/a2lflexer.l"


            yylval = yy_value;



#line 1679 "D:/projects/a2llib/src/a2lflexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1559 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1558 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 215 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 215 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 216 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 46 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ASAP2_VERSION; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::A2ML_VERSION;  }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ADDR_EPK;  }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ADDRESS_TYPE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_BYTE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_FLOAT16_IEEE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_FLOAT32_IEEE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_FLOAT64_IEEE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_INT64; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_LONG; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_WORD; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ANNOTATION; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ANNOTATION_LABEL; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ANNOTATION_ORIGIN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ANNOTATION_TEXT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ARRAY_SIZE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AR_COMPONENT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AR_PROTOTYPE_OF; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_DESCR; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_REF; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_X; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_Y; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_Z; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_4; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_5; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_RESCALE_X; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::BIT_MASK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::BIT_OPERATION; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::BLOB; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::A2L_BYTE_ORDER; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CALIBRATION_ACCESS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CALIBRATION_HANDLE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CALIBRATION_HANDLE_TEXT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CALIBRATION_METHOD; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CHARACTERISTIC; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COEFFS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COEFFS_LINEAR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPARISON_QUANTITY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPU_METHOD; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPU_TAB; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPU_TAB_REF; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPU_VTAB; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPU_VTAB_RANGE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CONSISTENT_EXCHANGE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CONTROLLER_ADDRESSES; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CONVERSION; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CPU_TYPE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CURVE_AXIS_REF; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CUSTOMER; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CUSTOMER_NO; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DATA_SIZE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 98 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DEF_CHARACTERISTIC; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 99 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DEFAULT_VALUE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 100 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DEFAULT_VALUE_NUMERIC; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 101 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DEPENDENT_CHARACTERISTIC; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 102 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DEPOSIT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 103 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DISCRETE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 104 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DISPLAY_IDENTIFIER; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 105 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DIST_OP_X; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 106 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DIST_OP_Y; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 107 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DIST_OP_Z; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 108 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DIST_OP_4; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 109 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DIST_OP_5; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 110 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ECU; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 111 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ECU_ADDRESS; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 112 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ECU_ADDRESS_EXTENSION; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 113 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ECU_CALIBRATION_OFFSET; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 114 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ENCODING; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 115 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::EPK; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 116 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ERROR_MASK; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 117 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::EXTENDED_LIMITS; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 118 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_AXIS_PAR; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 119 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_AXIS_PAR_DIST; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 120 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_AXIS_PAR_LIST; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 121 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_NO_AXIS_PTS_X; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 122 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_NO_AXIS_PTS_Y; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 123 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_NO_AXIS_PTS_Z; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 124 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_NO_AXIS_PTS_4; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 125 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_NO_AXIS_PTS_5; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 126 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FNC_VALUES; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 127 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FORMAT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 128 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FORMULA; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 129 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FORMULA_INV; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 130 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FRAME; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 131 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FRAME_MEASUREMENT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 132 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FUNCTION; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 133 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FUNCTION_LIST; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 134 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FUNCTION_VERSION; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 135 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::GROUP; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 136 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::GUARD_RAILS; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 137 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::HEADER; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 138 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::IDENTIFICATION; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 139 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::IN_MEASUREMENT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 140 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::INPUT_QUANTITY; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 141 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::INSTANCE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 142 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::LAYOUT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 143 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::LEFT_SHIFT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 144 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::LIMITS; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 145 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::LOC_MEASUREMENT; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 146 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MAP_LIST; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 147 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MATRIX_DIM; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 148 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MAX_GRAD; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 149 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MAX_REFRESH; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 150 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MEASUREMENT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 151 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MEMORY_LAYOUT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 152 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MEMORY_SEGMENT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 153 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MOD_COMMON;  }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 154 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MOD_PAR;  }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 155 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MODEL_LINK; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 156 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MODULE;  }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 157 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MONOTONY;  }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 158 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_AXIS_PTS_X; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 159 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_AXIS_PTS_Y; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 160 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_AXIS_PTS_Z; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 161 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_AXIS_PTS_4; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 162 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_AXIS_PTS_5; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 163 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_OF_INTERFACES; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 164 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_RESCALE_X; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 165 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NUMBER; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 166 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OFFSET_X; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 167 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OFFSET_Y; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 168 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OFFSET_Z; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 169 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OFFSET_4; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 170 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OFFSET_5; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 171 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OUT_MEASUREMENT; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 172 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OVERWRITE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 173 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::PHONE_NO; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 174 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::PHYS_UNIT; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 175 "D:/projects/a2llib/src/a2lflexer.l"
{
                    found_ = true;
                    return token::PROJECT;
                  }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 179 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::PROJECT_NO; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 180 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::READ_ONLY; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 181 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::READ_WRITE; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 182 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RECORD_LAYOUT; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 183 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::REF_CHARACTERISTIC; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 184 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::REF_GROUP; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 185 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::REF_MEASUREMENT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 186 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::REF_MEMORY_SEGMENT; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 187 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::REF_UNIT; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 188 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RESERVED; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 189 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIGHT_SHIFT; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 190 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_W; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 191 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_X; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 192 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_Y; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 193 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_Z; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 194 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_4; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 195 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_5; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 196 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ROOT; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 197 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::S_REC_LAYOUT; } /* Deprecated */
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 198 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SHIFT_OP_X; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 199 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SHIFT_OP_Y; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 200 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SHIFT_OP_Z; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 201 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SHIFT_OP_4; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 202 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SHIFT_OP_5; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 203 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SIGN_EXTEND; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 204 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SI_EXPONENTS; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 205 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SRC_ADDR_X; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 206 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SRC_ADDR_Y; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 207 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SRC_ADDR_Z; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 208 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SRC_ADDR_4; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 209 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SRC_ADDR_5; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 210 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::STATIC_ADDRESS_OFFSETS; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 211 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::STATIC_RECORD_LAYOUT; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 212 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::STATUS_STRING_REF; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 213 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::STEP_SIZE; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 214 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::STRUCTURE_COMPONENT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 215 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SUB_FUNCTION; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 216 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SUB_GROUP; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 217 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SUPPLIER; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 218 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SYMBOL_LINK; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 219 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SYMBOL_TYPE_LINK; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 220 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SYSTEM_CONSTANT; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 221 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TRANSFORMER; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 222 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TRANSFORMER_IN_OBJECTS; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 223 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TRANSFORMER_OUT_OBJECTS; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 224 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TYPEDEF_AXIS; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 225 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TYPEDEF_BLOB; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 226 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TYPEDEF_CHARACTERISTIC; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 227 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TYPEDEF_MEASUREMENT; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 228 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TYPEDEF_STRUCTURE; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 229 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::UNIT; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 230 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::UNIT_CONVERSION; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 231 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::USER; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 232 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::USER_RIGHTS; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 233 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_ADDRESS; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 234 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_CHARACTERISTIC; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 235 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_CRITERION; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 236 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_FORBIDDEN_COMB; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 237 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_MEASUREMENT; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 238 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_NAMING; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 239 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_SELECTION_CHARACTERISTIC; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 240 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_SEPARATOR; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 241 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VARIANT_CODING; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 242 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::A2L_VERSION; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 243 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VIRTUAL; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 244 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VIRTUAL_CHARACTERISTIC; }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 246 "D:/projects/a2llib/src/a2lflexer.l"
{
                        // Read in the format specification
                        if (yylval != nullptr) {
                            yylval->emplace<std::string>(ReadA2ML());
                        }
                        return token::A2ML;
                     }
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 254 "D:/projects/a2llib/src/a2lflexer.l"
{
                        // Read in the if_data string
                        if (yylval != nullptr) {
                            yylval->emplace<std::string>(ReadIfData());
                        }
                        return token::IF_DATA;
                       }
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 261 "D:/projects/a2llib/src/a2lflexer.l"
{
                 // Read in the if_data string until end of line
                 if(yylval != nullptr ) {
                    yylval->emplace<std::string>(ReadIfDataMultiLine());
                 }
                 return token::IF_DATA;
            }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 268 "D:/projects/a2llib/src/a2lflexer.l"
{
                  // Read in the if_data string until end of line
                  if (yylval != nullptr) {
                    yylval->emplace<std::string>(ReadIfDataSingleLine());
                  }
                  return token::IF_DATA;
             }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 275 "D:/projects/a2llib/src/a2lflexer.l"
{ SkipUntil('}'); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::A2L_BEGIN; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::A2L_END; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 280 "D:/projects/a2llib/src/a2lflexer.l"
{
                    FixIncludeFile();
                 }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 286 "D:/projects/a2llib/src/a2lflexer.l"
{
                   const std::string temp(yytext);
                   if (yylval != nullptr) {
                     yylval->emplace<std::string>(temp);
                   }
                   return token::IDENT;
                 }
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 294 "D:/projects/a2llib/src/a2lflexer.l"
{
                   const size_t len = strlen(yytext);
                   std::string temp;
                   if (len > 2) {
                     temp = yytext + 1;
                     temp.pop_back();
                   }
                   yylval->emplace<std::string>(temp);
                   return token::STRING;
                 }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 305 "D:/projects/a2llib/src/a2lflexer.l"
{
		uint64_t address = 0;
		for ( size_t index = 0; yytext[ index ] != '\0'; ++index ) {
			if ( index < 2 ) continue;
			const char token = yytext[index];
			switch ( token ) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				address *= 16;
				address += token - '0';
				break;

			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
				address *= 16;
				address += token - 'A' + 10;
				break;

			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':
				address *= 16;
				address += token - 'a' + 10;
				break;

			default:
				break;
			}
		}

		yylval->emplace<uint64_t>(address);
	    return token::HEX;
    }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 353 "D:/projects/a2llib/src/a2lflexer.l"
{
                    uint64_t temp = 0;
                    try {
                      temp = std::stoull(yytext);
                    } catch (const std::exception& ) {

                    }
                    yylval->emplace<uint64_t>(temp);
                    return token::UINT;
                  }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 363 "D:/projects/a2llib/src/a2lflexer.l"
{
                     int64_t temp = 0;
                     try {
                       temp = std::stoll(yytext);
                     } catch (const std::exception& ) {

                     }
                     yylval->emplace<int64_t>(temp);
                     return token::INT;
                   }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 373 "D:/projects/a2llib/src/a2lflexer.l"
{
                   double temp = 0.0;
                   try {
                     temp = std::stod(yytext);
                   } catch (const std::exception&) {

                   }
                   yylval->emplace<double>(temp);
                   return token::FLOAT;
                 }
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 384 "D:/projects/a2llib/src/a2lflexer.l"
{ } /* Multi line comments */
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 385 "D:/projects/a2llib/src/a2lflexer.l"
{ /* Single line comment  */ }
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 386 "D:/projects/a2llib/src/a2lflexer.l"
{}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 387 "D:/projects/a2llib/src/a2lflexer.l"
{}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PRI):
case YY_STATE_EOF(VERSION):
case YY_STATE_EOF(TIMESTAMP):
case YY_STATE_EOF(HOSTNAME):
case YY_STATE_EOF(APPNAME):
case YY_STATE_EOF(PROCID):
case YY_STATE_EOF(MSGID):
case YY_STATE_EOF(SD):
case YY_STATE_EOF(SDELEMENT):
case YY_STATE_EOF(SDPAR):
case YY_STATE_EOF(SDVALUE):
case YY_STATE_EOF(MSG):
#line 388 "D:/projects/a2llib/src/a2lflexer.l"
{
            if (file_stack_.size() <= 1) {
                yyterminate();
            } else {
                auto& last_item = file_stack_.back();
                yy_delete_buffer(last_item.buffer_state);
                file_stack_.pop_back();
                auto& current_item = file_stack_.back();
                yy_switch_to_buffer(current_item.buffer_state);
            }
        }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 399 "D:/projects/a2llib/src/a2lflexer.l"
ECHO;
	YY_BREAK
#line 2990 "D:/projects/a2llib/src/a2lflexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1559 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1559 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1558);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 399 "D:/projects/a2llib/src/a2lflexer.l"




