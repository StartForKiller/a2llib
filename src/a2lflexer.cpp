#line 1 "D:/projects/a2llib/src/a2lflexer.cpp"
    #include <cstdint>
    #include <cctype>

#line 5 "D:/projects/a2llib/src/a2lflexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer a2lFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

#ifdef yyalloc
#define a2lalloc_ALREADY_DEFINED
#else
#define yyalloc a2lalloc
#endif

#ifdef yyrealloc
#define a2lrealloc_ALREADY_DEFINED
#else
#define yyrealloc a2lrealloc
#endif

#ifdef yyfree
#define a2lfree_ALREADY_DEFINED
#else
#define yyfree a2lfree
#endif

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

inline int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int a2l:A2lScanner::yylex()

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 214
#define YY_END_OF_BUFFER 215
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1542] =
    {   0,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  215,  213,  212,  212,
      213,  213,  213,  207,  207,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  212,    0,  205,    0,  208,
        0,  211,    0,    0,    0,  209,  207,    0,    0,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,    0,    0,    0,  211,    0,
        0,    0,  209,    0,  209,  206,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,   64,
      204,   69,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,    0,  210,    0,  202,    0,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,   30,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  147,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  180,  182,  204,
      204,  204,  204,    0,    0,    0,    0,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,   84,  204,
       89,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  201,
        0,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,   37,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,   81,  204,  204,  204,  204,   91,  204,  204,

      204,  204,  204,   96,  204,   98,  204,  204,  204,  204,
      204,  204,  204,  204,  110,  204,  204,  204,  204,  204,
      204,  119,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,    0,    0,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,   56,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,   82,  204,  204,  204,  204,  199,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      108,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      129,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  193,
      194,    0,    0,  203,  204,  204,    3,  204,  204,  204,
      204,  204,  204,  204,   20,  204,   28,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,   47,  204,
       49,  204,  204,  204,  204,   57,  204,  204,  204,  204,
       68,  204,  204,  204,  204,  204,  204,  204,   86,  204,
      204,    0,  204,   95,  204,  204,  204,  100,  204,  102,
      204,  204,  204,  204,  204,  204,  111,  204,  204,  204,
      123,  124,  120,  121,  122,  204,  204,  127,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  138,  139,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  168,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,    0,    0,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,   41,  204,  204,  204,  204,  204,   51,  204,  204,
      204,  204,   62,   63,   59,   60,   61,  204,  204,  204,
      204,  204,  204,  204,  204,  204,    0,  204,  204,  204,
      198,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  126,  128,  204,  131,
      204,  204,  204,  135,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  164,  204,  204,  167,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,    0,    0,  204,  204,  204,   12,   16,  204,  204,
      204,   19,   25,   26,  204,   22,   23,   24,  204,  204,
       31,  204,  204,  204,  204,  204,  204,   43,  204,   46,
      204,  204,  204,  204,  204,  204,  204,  204,   70,  204,
      204,  204,   80,  204,  204,  200,  204,  204,  204,  204,
      204,  204,   97,  204,  101,  204,  204,  204,  204,  109,
      107,  204,  204,  204,  204,  130,  132,  204,  204,  204,
      204,  204,  145,  146,  141,  142,  143,  144,  152,  153,
      149,  150,  151,  204,  204,  159,  160,  156,  157,  158,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  189,  204,  204,  204,  196,    0,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,   50,  204,  204,  204,  204,   65,  204,  204,
      204,  204,   83,  204,  204,  204,   90,  204,  204,  204,
      204,  103,  104,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  140,  154,  204,  204,  204,  204,  204,
      204,  169,  204,  204,  204,  172,  204,  204,  204,  204,

      204,  204,  183,  204,  184,  204,  204,  204,  204,  204,
      204,  204,    0,    2,    4,  204,  204,  204,  204,  204,
      204,  204,  204,   17,  204,  204,   21,  204,  204,  204,
      204,  204,  204,   40,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,   72,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  118,  204,
      204,  204,  204,  204,  155,  204,  204,  204,  204,  166,
      204,  204,  148,  204,  175,  176,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,    0,  204,
      204,  204,  204,  204,  204,  204,  204,  204,    1,  204,

       29,  204,  204,  204,  204,   38,  204,   42,  204,  204,
      204,   53,  204,  204,  204,  204,  204,  204,  204,  204,
      204,   87,  204,  204,  204,  204,  204,  105,  204,  115,
      116,  112,  113,  114,  204,  204,  133,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  186,  204,  204,  204,  191,  204,
      197,    5,  204,  204,   10,   11,  204,  204,  204,  204,
       27,  204,  204,  204,   36,  204,  204,  204,   48,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,   92,   94,   93,  204,  106,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  192,  204,  204,  204,  204,  204,  204,
        9,  204,  204,   15,   18,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,   71,  204,  204,
      204,  204,  204,   99,  204,  125,  204,  136,  204,  204,
      204,  204,  204,  204,  171,  204,  204,  204,  204,  204,
      181,  204,  204,  188,  204,  204,  204,  204,  204,   13,
      204,  204,  204,  204,  204,   44,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,   88,  117,  204,
      204,  204,  204,  204,  204,  170,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,   14,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
       73,   74,   78,   79,   75,   76,   77,   85,  204,  204,
      204,  204,  163,  204,  204,  204,  204,  204,  179,  204,
      204,  204,  204,  204,  204,  204,   32,   33,   35,  204,
      204,  204,   52,  204,   58,  204,  204,  134,  137,  204,
      204,  204,  204,  204,  204,  204,  185,  187,  204,  204,
      204,  204,  204,  204,   39,   45,  204,  204,  204,  204,
      204,  204,  165,  204,  204,  204,  178,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  162,  204,

      204,  204,  204,  204,  204,  204,  204,  204,   54,  204,
       66,  204,  204,  204,  204,  204,  204,  204,    6,    7,
        8,  204,  204,   67,  161,  173,  204,  177,  204,  195,
       34,  204,  174,  204,   55,  204,  204,  204,  204,  190,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        5,    6,    7,    1,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   18,   18,    1,    1,    1,
        1,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        5,   45,    5,    1,   46,    1,   47,   48,   49,   50,

       51,   47,   52,   53,   54,   53,   53,   55,   53,   56,
       53,   53,   53,   53,   53,   53,   57,   53,   53,   58,
       53,   53,   59,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[60] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    5,    6,    3,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    8,
        8,    8,    9,    8,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,   10,    3,    3,    1,    3,    8,    8,    8,    8,
        9,    3,    3,    3,    3,    3,    3,   10,    1
    } ;

static const flex_int16_t yy_base[1553] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1668, 1669,   58,   60,
       60,   54,   67,   65,   66,   90,   49,   61,   59,   77,
       98,   45, 1644,   61,    0,  116,  117,   57,  105,   65,
      115,  120,   61,   96,   83,  149,  110, 1662, 1662,  144,
     1658,    0, 1612, 1606, 1605,  118,    0,  153,    0,    0,
     1629, 1637, 1631, 1625,  118, 1637, 1628, 1616, 1620, 1614,
     1621, 1631,  139, 1610,  136, 1610,  141, 1610, 1607, 1624,
     1615, 1607, 1604, 1599, 1619, 1603, 1619, 1605, 1603, 1616,

     1615, 1610, 1586,  140, 1588, 1606, 1598, 1607,  142,  159,
      157, 1581, 1595, 1601, 1586, 1600,  148, 1589,  164,  162,
     1588, 1593,  157, 1598,  174,  172,  163, 1582, 1598, 1582,
     1588, 1591, 1577, 1576, 1575,  153, 1604,  198,    0, 1557,
     1558, 1558,  176,  200,  208,    0, 1576, 1569, 1579, 1570,
     1583,  207, 1567, 1563, 1553, 1578, 1574, 1569, 1559, 1570,
     1559,  165, 1546, 1551, 1552, 1570,  188,  206,  209, 1542,
     1554,    0, 1553, 1562, 1538, 1537, 1551, 1550, 1559, 1540,
     1542, 1555, 1544, 1553, 1535, 1535, 1541, 1538, 1532, 1542,
     1522, 1521, 1530, 1519, 1527, 1530,  209, 1529,  216, 1541,

     1523, 1513, 1522, 1525, 1519, 1527, 1532, 1520, 1506, 1528,
     1524, 1503, 1510, 1523, 1514, 1522, 1498, 1505, 1508, 1502,
     1494, 1505, 1518, 1499, 1513, 1503, 1511, 1495, 1496,  204,
     1494, 1492, 1523, 1669, 1474, 1669, 1472, 1480,  210, 1493,
     1486, 1480, 1489, 1485, 1507, 1473,  205,    0, 1472, 1497,
     1497, 1491,  218, 1487, 1490, 1474, 1488, 1477, 1463, 1469,
     1486, 1474, 1468, 1468, 1473, 1456,  221, 1479, 1464, 1467,
      226, 1458,  225, 1474, 1458, 1461, 1472, 1470, 1454, 1472,
     1452, 1470, 1465, 1448, 1440, 1447, 1453, 1453, 1455,  226,
     1442, 1444, 1449, 1448,  225, 1439, 1434, 1451, 1451, 1450,

     1449, 1440, 1429, 1446, 1422, 1444, 1420, 1429,  240, 1428,
     1425, 1443,    0, 1423, 1414, 1417, 1439,  227, 1411, 1435,
      243, 1425, 1421, 1430, 1431, 1414, 1428, 1403, 1402, 1428,
      251, 1419, 1406, 1438,  263, 1387, 1385, 1401, 1403, 1416,
     1407, 1418, 1390, 1404, 1401, 1387,  255, 1413, 1397, 1397,
     1393, 1407, 1390, 1390, 1379, 1387, 1387, 1379, 1375, 1389,
     1382, 1388, 1391, 1394, 1388, 1391, 1394, 1379, 1389, 1391,
     1382, 1362, 1385, 1364, 1372, 1385, 1365, 1372, 1355, 1373,
        0, 1353, 1362, 1370, 1358, 1349, 1362, 1374, 1354, 1354,
     1353, 1366, 1361, 1345, 1350, 1362, 1348, 1340, 1336, 1358,

     1347, 1360, 1345, 1350, 1330, 1338, 1338, 1335, 1349, 1335,
     1324, 1330, 1347,  243, 1345, 1340, 1329, 1341, 1331, 1322,
     1315, 1338, 1313, 1335, 1323, 1334, 1334, 1317, 1316, 1314,
     1312, 1314, 1322, 1318, 1316, 1300, 1321, 1321, 1322, 1306,
     1309, 1318,  227, 1306, 1315, 1318, 1313, 1302, 1315,  278,
     1283, 1309, 1294, 1296, 1306, 1290, 1290, 1292, 1287, 1284,
     1300, 1284, 1298, 1283, 1296, 1282, 1298, 1278, 1269, 1287,
      247, 1275, 1275, 1277, 1291, 1286, 1281, 1269, 1287, 1282,
     1266, 1265, 1259, 1267, 1278, 1269, 1266, 1266, 1273, 1268,
     1248, 1263,    0, 1273, 1260, 1257, 1253,    0, 1264, 1268,

     1251, 1264, 1247,    0, 1257,    0, 1263, 1244, 1234, 1260,
     1254, 1254, 1230, 1245,    0, 1243, 1237, 1240, 1234, 1243,
     1248,    0, 1222, 1248, 1239, 1233, 1232, 1225, 1230, 1225,
     1214, 1240, 1225,  255, 1230, 1233, 1218, 1232, 1220, 1210,
     1218, 1228, 1203, 1202, 1220, 1207, 1213, 1211, 1220, 1196,
     1195, 1210, 1206, 1214, 1204, 1209, 1197, 1212, 1214, 1205,
     1195, 1211, 1198,  260, 1196, 1197,  290, 1175, 1189, 1178,
     1194, 1190, 1194, 1193, 1186, 1185, 1194, 1179, 1178, 1177,
     1184, 1176, 1189, 1172, 1186, 1178, 1170, 1183, 1186, 1166,
     1180, 1175, 1178, 1158, 1163, 1154, 1151, 1160, 1163,    0,

     1171, 1147, 1146, 1155, 1163, 1164, 1169, 1165, 1149, 1166,
     1145, 1137, 1159, 1149, 1161, 1152,  293, 1139, 1154, 1137,
     1124, 1110, 1099, 1102, 1093, 1075,   68,  267,  141,  178,
        0,  217,  252,  267,  281,  286,  266,  267,  273,  280,
      262,  280,  284,  282,  277,  275,  278,  283,  280,  297,
      294,  285,  288,  285,  292,  289,  307,  290,  287,  296,
      312,  295,  299,  306,  316,  319,  303,  294,  309,  317,
      299,  310,  311,  310,  329,  313,  324,  329,  334,    0,
      308,  342,  332, 1669,  320,  320,    0,  321,  327,  317,
      330,  325,  328,  344,  320,  346,    0,  349,  346,  343,

      335,  345,  340,  336,  355,  357,  345,  345,    0,  352,
      334,  358,  342,  364,  346,    0,  358,  371,  365,  369,
        0,  353,  345,  346,  351,  371,  368,  377,  395,  372,
      379,  399,  384,    0,  368,  381,  367,    0,  380,    0,
      385,  386,  391,  388,  380,  383,    0,  383,  380,  389,
        0,    0,    0,    0,    0,  381,  398,    0,  384,  391,
      381,  387,  407,  408,  394,  390,  394,    0,    0,  404,
      386,  387,  411,  412,  390,  415,  415,  401,  417,  419,
      405,  410,    0,  418,  403,  414,  405,  418,  431,  413,
      428,  434,  433,  438,  436,  433,  422,  431,  443,  429,

      445,  436,  423,  443,  428,  426,  441,  451,  452,  433,
      440,  442,  464,  462,  444,  447,  451,  458,  454,  455,
      462,  443,  470,  453,  460,  456,  462,    0,  476,  475,
      451,  476,    0,    0,    0,    0,    0,  462,  465,  473,
      473,  470,  478,  472,  478,  474,  510,  484,  485,  497,
     1669,  485,  495,  481,  484,  490,  485,  491,  482,  501,
      498,  496,  491,  507,  508,  496,    0,    0,  500,    0,
      511,  492,  515,    0,  501,  495,  515,  529,  532,  508,
      509,  535,  520,  522,  510,    0,  503,  525,    0,  521,
      520,  523,  523,  534,  516,  529,  534,  538,  524,  540,

      526,  532,  529,  546,  532,  558,  545,  557,  545,  565,
      559,  556,  565,  555,  555,  570,  545,    0,  560,  559,
      568,    0,    0,    0,  573,    0,    0,    0,  568,  572,
        0,  569,  565,  580,  558,  572,  570,  561,  562,    0,
      563,  577,  582,  575,  593,  592,  579,  598,    0,  591,
      600,  583,    0,  581,  583, 1669,  596,  601,  588,  588,
      589,  597,    0,  606,    0,  604,  593,  599,  602,    0,
        0,  597,  599,  590,  614,    0,    0,  605,  601,  617,
      595,  604,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  621,  606,    0,    0,    0,    0,    0,

      609,  613,  620,  627,  616,  621,  628,  615,  614,  618,
      628,  623,  638,  639,  623,  624,  624,  640,  626,  626,
      638,  644,  644,    0,  641,  631,  651, 1669,  652,  640,
      650,  631,  645,  644,  644,  645,  649,  642,  658,  650,
      660,  662,  653,  642,  651,  671,  656,  670,  670,  658,
      672,  660,    0,  658,  675,  673,  668,  655,  664,  672,
      668,  659,    0,  670,  670,  672,    0,  682,  683,  688,
      681,    0,    0,  674,  691,  669,  692,  675,  687,  680,
      697,  690,  685,    0,    0,  686,  701,  689,  694,  694,
      696,    0,  683,  692,  693,  686,  696,  714,  699,  699,

      698,  701,    0,  712,    0,  717,  708,  719,  712,  711,
      712,  710,  709,    0,    0,  710,  716,  712,  719,  716,
      734,  718,  732,    0,  710,  725,    0,  712,  727,  741,
      734,  726,  724,    0,  740,  746,  724,  745,  746,  734,
      752,  735,  751,  748,  749,  731,  744,  756,  742,  744,
      749,  745,  752,  762,  748,  755,  773,  771,    0,  768,
      754,  757,  771,  772,    0,  759,  775,  773,  768,    0,
      770,  782,    0,  775,    0,    0,  784,  765,  784,  779,
      775,  773,  778,  779,  789,  781,  778,  799,  800,  797,
      802,  805,  798,  802,  805,  799,  785,  795,    0,  787,

        0,  809,  812,  809,  812,    0,  815,    0,  803,  815,
      813,  792,  812,  804,  814,  800,  810,  806,  823,  808,
      816,    0,  821,  817,  807,  813,  820,    0,  816,    0,
        0,    0,    0,    0,  834,  824,    0,  830,  826,  834,
      823,  815,  816,  829,  837,  833,  834,  828,  847,  833,
      832,  838,  847,  846,    0,  828,  843,  830,    0,  856,
     1669,    0,  840,  864,    0,    0,  857,  856,  844,  859,
        0,  863,  853,  848,    0,  855,  863,  863,    0,  858,
      854,  873,  869,  856,  863,  859,  870,  871,  862,  877,
      868,    0,    0,    0,  864,    0,  880,  866,  868,  868,

      876,  862,  879,  874,  878,  880,  875,  868,  877,  878,
      894,  879,  887,    0,  883,  900,  884,  902,  886,  913,
        0,  896,  901,    0,    0,  906,  909,  906,  895,  911,
      916,  897,  899,  917,  912,  917,  895,    0,  905,  906,
      898,  913,  914,    0,  910,    0,  910,    0,  926,  917,
      932,  929,  921,  925,    0,  922,  910,  934,  927,  923,
        0,  922,  928,    0,  936,  940,  947,  952,  951,    0,
      935,  931,  939,  937,  944,    0,  940,  942,  947,  937,
      953,  945,  945,  941,  942,  966,  945,    0,    0,  957,
      953,  962,  944,  964,  966,    0,  970,  958,  956,  970,

      971,  968,  965,  978,  962,  953,  954,  955,    0,  965,
      980,  982,  967,  981,  984,  990,  989,  977,  977,  991,
        0,    0,    0,    0,    0,    0,    0,    0,  995,  979,
      994,  986,    0,  988,  993, 1002,  996,  992,    0, 1004,
     1006,  991, 1001, 1002, 1003, 1004,    0,  986,    0,  990,
     1011,  999,    0, 1000,    0, 1010, 1014,    0,    0, 1002,
     1001, 1003, 1019, 1015, 1007, 1007,    0,    0, 1027, 1010,
     1025, 1026, 1027, 1013,    0,    0, 1025, 1026, 1021, 1018,
     1033, 1019,    0, 1037, 1036, 1022,    0, 1040, 1024, 1040,
     1041, 1042, 1043, 1046, 1031, 1037, 1047, 1033,    0, 1034,

     1052, 1047, 1037, 1049, 1054, 1055, 1056, 1038,    0, 1043,
        0, 1044, 1046, 1047, 1047, 1065, 1064, 1067,    0,    0,
        0, 1051, 1063,    0,    0,    0, 1054,    0, 1056,    0,
        0, 1072,    0, 1067,    0, 1058, 1058, 1070, 1077,    0,
     1669, 1098, 1103, 1111, 1116, 1125, 1135, 1139, 1145, 1146,
     1155, 1165
    } ;

static const flex_int16_t yy_def[1553] =
    {   0,
     1541,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1, 1541, 1541, 1541, 1541,
     1542, 1541, 1541, 1543, 1543, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1541, 1542, 1541, 1542, 1545,
     1546, 1547, 1541, 1541, 1541, 1548,   35, 1549, 1550, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1542, 1546, 1551, 1547, 1541,
     1541, 1541, 1548, 1541, 1541, 1550, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1552, 1541, 1541, 1541, 1541, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1552, 1551, 1541, 1541, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1541,
     1541, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1541, 1541, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1541, 1541, 1541, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1541, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1541, 1541, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1541, 1544, 1544, 1544,
     1541, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1541, 1541, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1541, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1541, 1541, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1541, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1541, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1541, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
        0, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541
    } ;

static const flex_int16_t yy_nxt[1729] =
    {   0,
       28,   29,   30,   31,   28,   28,   32,   32,   28,   33,
       34,   35,   35,   35,   35,   35,   35,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   45,   46,
       47,   48,   49,   50,   45,   51,   52,   53,   54,   55,
       45,   45,   45,   45,   28,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   28,   56,
       56,   56,   56,   58,   60,   60,   60,   60,   60,   60,
       60,   60,   61,   66,   66,   78,   62,   86,   79,   81,
       99,   87,  102,  100,  103,   88,   82,   68,   68,  112,
      117,   80,  104,   83,   84,  113,  129,   89,  742,   85,

      118,  133,   71,  130,   59,  134,   69, 1541,   90,  135,
       91,   72,   92,   58,   63,   68,   68,   64,   93,   73,
       65,   74,   69, 1541,   94,   75,   76,  131,  114,   95,
       96,   77,  132,   97,  105,  109,   98,  119,  106,  110,
       68,  120,  107,  115,  116,  122,  123,  121,  108,  111,
       56,   56,   66,  151,   59,  124,   58,  125,  126,  144,
      144,  160,  127,  152,  167,  128,   68,  745,   68,  161,
      162,  164,  165,  185,  168,  192,  186,  195,  197,  193,
      204,  215,  207,  194,  208,  187,  211,  209,  198,  196,
      205,  221,  218,  223,   68,  212,  219,   59,   68,  224,

      210,  254,  216,  138,  255,  222,  260,  234,  746,  220,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,   68,  243,  262,  264,
      330,  293,  339,  261,  297,  348,  354,  349,  263,  369,
      244,  370,  265,  377,  374,  401,  266,  294,  298,  331,
      395,  299,  559,  427,  295,  340,  355,  375,  402,  747,
      416,  396,  560,  378,  417,  428,  431,  432,  335,  442,
      418,  443,  234,  647,  444,  529,  461,  588,  419,  567,
      567,  445,  446,  530,  589,  648,  590,  447,  462,  678,
      463,  567,  567,  679,  732,  732,  743,  748,  749,  750,

      751,  752,  756,  744,  757,  758,  759,  760,  682,  761,
      762,  763,  764,  765,  766,  767,  683,  768,  769,  770,
      771,  772,  773,  774,  775,  776,  778,  753,  754,  755,
      779,  780,  781,  782,  783,  784,  786,  787,  788,  789,
      790,  791,  777,  785,  792,  793,  794,  795,  796,  797,
      798,  799,  800,  801,  802,  803,  804,  805,  806,  807,
      808,  809,  810,  811,  812,  813,  814,  815,  816,  817,
      818,  819,  820,  821,  822,  823,  824,  825,  826,  827,
      828,  829,  830,  831,  832,  833,  834,  838,  839,  840,
      841,  842,  843,  844,  845,  846,  847,  847,  849,  850,

      732,  732,  852,  853,  854,  855,  856,  857,  858,  859,
      860,  861,  835,  836,  837,  862,  863,  864,  865,  866,
      867,  868,  869,  870,  871,  872,  873,  874,  875,  876,
      877,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      848,  887,  888,  889,  890,  891,  892,  893,  894,  895,
      896,  897,  900,  901,  902,  903,  904,  851,  905,  906,
      907,  898,  908,  909,  910,  911,  912,  899,  913,  914,
      915,  916,  917,  918,  919,  920,  921,  922,  923,  924,
      929,  930,  931,  932,  933,  934,  935,  936,  937,  938,
      939,  940,  941,  942,  943,  944,  945,  946,  947,  925,

      948,  949,  950,  951,  952,  926,  927,  928,  953,  954,
      955,  847,  847,  957,  959,  960,  961,  962,  963,  964,
      965,  966,  967,  958,  968,  969,  970,  971,  972,  973,
      974,  975,  976,  977,  978,  979,  980,  981,  982,  994,
      995, 1001, 1002,  983,  984, 1003,  989,  990, 1004,  996,
      997, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
     1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,  956,  985,
      986,  987,  988,  991,  992,  993,  998,  999, 1000, 1022,
     1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
     1037, 1038, 1039, 1033, 1040, 1041, 1034, 1042, 1043, 1035,

     1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
     1036, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
     1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
     1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
     1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
     1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
     1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1124,
     1125, 1122, 1126, 1127, 1128, 1129, 1123, 1130, 1131, 1132,
     1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,

     1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
     1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
     1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1205, 1206, 1207, 1208, 1209, 1210, 1203, 1211, 1212, 1213,
     1214, 1204, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
     1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1235,
     1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,

     1246, 1247, 1249, 1250, 1251, 1252, 1253, 1248, 1254, 1255,
     1256, 1257, 1258, 1259, 1232, 1233, 1234, 1260, 1261, 1262,
     1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
     1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
     1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293,
     1294, 1295, 1288, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
     1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
     1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
     1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
     1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,

     1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
     1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
     1363, 1364, 1365, 1366, 1367, 1370, 1368, 1371, 1372, 1369,
     1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
     1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
     1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
     1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
     1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
     1423, 1424, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
     1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,

     1446, 1447, 1448, 1449, 1450, 1451, 1452, 1425, 1426, 1427,
     1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
     1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
     1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
     1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
     1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
     1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512,
     1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
     1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
     1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   67,   67,
      741,   67,   67,   70,  740,   70,   70,   70,   70,   70,
       70,   60,   60,  739,   60,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  139,  738,  139,  139,  139,
      139,  139,  139,  139,  139,  143,  737,  143,  145,  145,
      736,  145,  146,  146,  146,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  735,  734,  733,  731,  730,
      729,  728,  727,  726,  725,  724,  723,  722,  721,  720,
      719,  718,  717,  716,  715,  714,  713,  712,  711,  710,

      709,  708,  707,  706,  705,  704,  703,  702,  701,  700,
      699,  698,  697,  696,  695,  694,  693,  692,  691,  690,
      689,  688,  687,  686,  685,  684,  681,  680,  677,  676,
      675,  674,  673,  672,  671,  670,  669,  668,  667,  666,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  617,  616,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  604,

      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  587,  586,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  566,  565,  564,  563,  562,  561,  558,
      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,

      495,  494,  493,  492,  491,  490,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,
      465,  464,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  335,  449,  448,  441,  440,  439,  438,
      437,  436,  435,  434,  433,  430,  429,  426,  425,  424,
      423,  422,  421,  420,  415,  414,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  400,  399,  398,
      397,  394,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  376,  373,  372,

      371,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  353,  352,  351,  350,  347,  346,
      345,  344,  343,  342,  341,  338,  337,  336,  335,  333,
      332,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  296,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  259,  258,
      257,  256,  253,  252,  251,  250,  249,  248,  247,  246,

      245,  242,  241,  240,  239,  238,  237,  236,  235,  138,
      232,  231,  230,  229,  228,  227,  226,  225,  217,  214,
      213,  206,  203,  202,  201,  200,  199,  191,  190,  189,
      188,  184,  183,  182,  181,  180,  179,  178,  177,  176,
      175,  174,  173,  172,  171,  170,  169,  166,  163,  159,
      158,  157,  156,  155,  154,  153,  150,  149,  148,  147,
      142,  141,  140,  138, 1541,  136,  101, 1541,   27, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,

     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541
    } ;

static const flex_int16_t yy_chk[1729] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   29,
       29,   30,   30,   31,   32,   32,   32,   32,   32,   32,
       32,   32,   33,   34,   35,   37,   33,   39,   37,   38,
       42,   39,   44,   42,   44,   39,   38,   34,   35,   48,
       50,   37,   44,   38,   38,   48,   53,   40,  627,   38,

       50,   55,   36,   53,   31,   55,   34,   35,   40,   55,
       40,   36,   40,   57,   33,   34,   35,   33,   40,   36,
       33,   36,   34,   35,   41,   36,   36,   54,   49,   41,
       41,   36,   54,   41,   46,   47,   41,   51,   46,   47,
       66,   51,   46,   49,   49,   52,   52,   51,   46,   47,
       56,   56,   60,   75,   57,   52,  136,   52,   52,   68,
       68,   83,   52,   75,   87,   52,   60,  629,   66,   83,
       83,   85,   85,  104,   87,  109,  104,  110,  111,  109,
      117,  123,  119,  109,  119,  104,  120,  119,  111,  110,
      117,  126,  125,  127,   60,  120,  125,  136,  143,  127,

      119,  162,  123,  138,  162,  126,  167,  138,  630,  125,
      144,  144,  144,  144,  144,  144,  144,  144,  145,  145,
      145,  145,  145,  145,  145,  145,  143,  152,  168,  169,
      230,  197,  239,  167,  199,  247,  253,  247,  168,  267,
      152,  267,  169,  273,  271,  295,  169,  197,  199,  230,
      290,  199,  443,  318,  197,  239,  253,  271,  295,  632,
      309,  290,  443,  273,  309,  318,  321,  321,  335,  331,
      309,  331,  335,  534,  331,  414,  347,  471,  309,  450,
      450,  331,  331,  414,  471,  534,  471,  331,  347,  564,
      347,  567,  567,  564,  617,  617,  628,  633,  634,  635,

      636,  636,  637,  628,  638,  639,  640,  641,  567,  642,
      643,  644,  645,  646,  647,  648,  567,  649,  650,  651,
      652,  653,  654,  655,  656,  657,  658,  636,  636,  636,
      659,  660,  661,  662,  663,  664,  665,  666,  667,  668,
      669,  670,  657,  664,  671,  672,  673,  674,  675,  676,
      677,  678,  679,  681,  682,  683,  685,  686,  688,  689,
      690,  691,  692,  693,  694,  695,  696,  698,  699,  700,
      701,  702,  703,  704,  705,  706,  707,  708,  710,  711,
      712,  713,  714,  715,  717,  718,  718,  719,  720,  722,
      723,  724,  725,  726,  727,  728,  729,  729,  730,  731,

      732,  732,  733,  735,  736,  737,  739,  741,  742,  743,
      744,  745,  718,  718,  718,  746,  748,  749,  750,  756,
      757,  759,  760,  761,  762,  763,  764,  765,  766,  767,
      770,  771,  772,  773,  774,  775,  776,  777,  778,  779,
      729,  780,  781,  782,  784,  785,  786,  787,  788,  789,
      789,  789,  790,  791,  792,  793,  794,  732,  795,  796,
      797,  789,  798,  799,  800,  801,  802,  789,  803,  804,
      805,  806,  807,  808,  809,  810,  811,  812,  813,  813,
      814,  815,  816,  817,  818,  819,  820,  821,  822,  823,
      824,  825,  826,  827,  829,  830,  831,  832,  838,  813,

      839,  840,  841,  842,  843,  813,  813,  813,  844,  845,
      846,  847,  847,  848,  849,  850,  852,  853,  854,  855,
      856,  857,  858,  848,  859,  860,  861,  862,  863,  864,
      865,  866,  869,  871,  872,  873,  875,  876,  877,  880,
      881,  883,  884,  878,  878,  885,  879,  879,  887,  882,
      882,  888,  890,  891,  892,  893,  894,  895,  896,  897,
      898,  899,  900,  901,  902,  903,  904,  905,  847,  878,
      878,  878,  878,  879,  879,  879,  882,  882,  882,  906,
      907,  908,  909,  910,  911,  912,  913,  914,  915,  916,
      917,  919,  920,  916,  921,  925,  916,  929,  930,  916,

      932,  933,  934,  935,  936,  937,  938,  939,  941,  942,
      916,  943,  944,  945,  946,  947,  948,  950,  951,  952,
      954,  955,  957,  958,  959,  960,  961,  962,  964,  966,
      967,  968,  969,  972,  973,  974,  975,  978,  979,  980,
      981,  982,  994,  995, 1001, 1002, 1003, 1004, 1005, 1006,
     1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027,
     1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
     1039, 1037, 1040, 1041, 1042, 1043, 1037, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057,

     1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1068, 1069,
     1070, 1071, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
     1082, 1083, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094,
     1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1117, 1118,
     1119, 1120, 1121, 1122, 1123, 1125, 1126, 1128, 1129, 1130,
     1131, 1132, 1133, 1135, 1136, 1137, 1130, 1138, 1139, 1140,
     1141, 1130, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
     1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1157, 1158,
     1160, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1171,

     1172, 1174, 1177, 1178, 1179, 1180, 1181, 1174, 1182, 1183,
     1184, 1185, 1186, 1187, 1157, 1157, 1157, 1188, 1189, 1190,
     1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1202,
     1203, 1204, 1205, 1207, 1209, 1210, 1211, 1212, 1213, 1214,
     1215, 1216, 1217, 1218, 1219, 1220, 1221, 1223, 1224, 1225,
     1226, 1227, 1219, 1229, 1235, 1236, 1238, 1239, 1240, 1241,
     1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
     1252, 1253, 1254, 1256, 1257, 1258, 1260, 1263, 1264, 1267,
     1268, 1269, 1270, 1272, 1273, 1274, 1276, 1277, 1278, 1280,
     1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,

     1291, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
     1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1315,
     1316, 1317, 1318, 1319, 1320, 1322, 1320, 1323, 1326, 1320,
     1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
     1337, 1339, 1340, 1341, 1342, 1343, 1345, 1347, 1349, 1350,
     1351, 1352, 1353, 1354, 1356, 1357, 1358, 1359, 1360, 1362,
     1363, 1365, 1366, 1367, 1368, 1369, 1371, 1372, 1373, 1374,
     1375, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
     1386, 1386, 1387, 1390, 1391, 1392, 1393, 1394, 1395, 1397,
     1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,

     1408, 1410, 1411, 1412, 1413, 1414, 1415, 1386, 1386, 1386,
     1416, 1417, 1418, 1419, 1420, 1429, 1430, 1431, 1432, 1434,
     1435, 1436, 1437, 1438, 1440, 1441, 1442, 1443, 1444, 1445,
     1446, 1448, 1450, 1451, 1452, 1454, 1456, 1457, 1460, 1461,
     1462, 1463, 1464, 1465, 1466, 1469, 1470, 1471, 1472, 1473,
     1474, 1477, 1478, 1479, 1480, 1481, 1482, 1484, 1485, 1486,
     1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
     1498, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
     1510, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1522, 1523,
     1527, 1529, 1532, 1534, 1536, 1537, 1538, 1539, 1542, 1542,

     1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1543, 1543,
      626, 1543, 1543, 1544,  625, 1544, 1544, 1544, 1544, 1544,
     1544, 1545, 1545,  624, 1545, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1547,  623, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1548,  622, 1548, 1549, 1549,
      621, 1549, 1550, 1550, 1550, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552,  620,  619,  618,  616,  615,
      614,  613,  612,  611,  610,  609,  608,  607,  606,  605,
      604,  603,  602,  601,  599,  598,  597,  596,  595,  594,

      593,  592,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
      573,  572,  571,  570,  569,  568,  566,  565,  563,  562,
      561,  560,  559,  558,  557,  556,  555,  554,  553,  552,
      551,  550,  549,  548,  547,  546,  545,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  521,  520,
      519,  518,  517,  516,  514,  513,  512,  511,  510,  509,
      508,  507,  505,  503,  502,  501,  500,  499,  497,  496,
      495,  494,  492,  491,  490,  489,  488,  487,  486,  485,

      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  470,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  449,  448,  447,  446,  445,  444,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  415,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  380,

      379,  378,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  334,  333,  332,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  320,  319,  317,  316,  315,
      314,  312,  311,  310,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  294,  293,  292,
      291,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  272,  270,  269,

      268,  266,  265,  264,  263,  262,  261,  260,  259,  258,
      257,  256,  255,  254,  252,  251,  250,  249,  246,  245,
      244,  243,  242,  241,  240,  238,  237,  235,  233,  232,
      231,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,
      210,  209,  208,  207,  206,  205,  204,  203,  202,  201,
      200,  198,  196,  195,  194,  193,  192,  191,  190,  189,
      188,  187,  186,  185,  184,  183,  182,  181,  180,  179,
      178,  177,  176,  175,  174,  173,  171,  170,  166,  165,
      164,  163,  161,  160,  159,  158,  157,  156,  155,  154,

      153,  151,  150,  149,  148,  147,  142,  141,  140,  137,
      135,  134,  133,  132,  131,  130,  129,  128,  124,  122,
      121,  118,  116,  115,  114,  113,  112,  108,  107,  106,
      105,  103,  102,  101,  100,   99,   98,   97,   96,   95,
       94,   93,   92,   91,   90,   89,   88,   86,   84,   82,
       81,   80,   79,   78,   77,   76,   74,   73,   72,   71,
       65,   64,   63,   61,   59,   58,   43,   27, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,

     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[215] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
    1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,     };

static const flex_int16_t yy_rule_linenum[214] =
    {   0,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
      106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
      116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,

      146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
      156,  157,  158,  159,  160,  161,  162,  163,  164,  165,
      166,  167,  168,  169,  170,  171,  172,  173,  174,  178,
      179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
      199,  200,  201,  202,  203,  204,  205,  206,  207,  208,
      209,  210,  211,  212,  213,  214,  215,  216,  217,  218,
      219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
      229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      239,  240,  241,  242,  243,  245,  253,  260,  267,  274,

      276,  277,  279,  285,  293,  304,  352,  362,  372,  383,
      384,  385,  386
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "D:/projects/a2llib/src/a2lflexer.l"

#line 7 "D:/projects/a2llib/src/a2lflexer.l"
    #include "a2lscanner.h"
    #undef  YY_DECL
    #define YY_DECL int a2l::A2lScanner::a2llex(a2l::A2lParser::value_type* yy_value)
    using token = a2l::A2lParser::token;
#line 1455 "D:/projects/a2llib/src/a2lflexer.cpp"
#define YY_NO_UNISTD_H 1
#define YY_NO_INPUT 1
#line 34 "D:/projects/a2llib/src/a2lflexer.l"
            /* \"([^\"\\]|(\\.))*\" */

#line 1461 "D:/projects/a2llib/src/a2lflexer.cpp"

#define INITIAL 0
#define PRI 1
#define VERSION 2
#define TIMESTAMP 3
#define HOSTNAME 4
#define APPNAME 5
#define PROCID 6
#define MSGID 7
#define SD 8
#define SDELEMENT 9
#define SDPAR 10
#define SDVALUE 11
#define MSG 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 40 "D:/projects/a2llib/src/a2lflexer.l"


            yylval = yy_value;



#line 1672 "D:/projects/a2llib/src/a2lflexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1542 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1541 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 214 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 214 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 215 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 46 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ASAP2_VERSION; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::A2ML_VERSION;  }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ADDR_EPK;  }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ADDRESS_TYPE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_BYTE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_FLOAT16_IEEE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_FLOAT32_IEEE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_FLOAT64_IEEE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_INT64; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_LONG; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ALIGNMENT_WORD; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ANNOTATION; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ANNOTATION_LABEL; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ANNOTATION_ORIGIN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ANNOTATION_TEXT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ARRAY_SIZE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AR_COMPONENT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AR_PROTOTYPE_OF; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_DESCR; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_REF; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_X; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_Y; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 69 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_Z; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 70 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_4; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 71 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_PTS_5; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 72 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::AXIS_RESCALE_X; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 73 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::BIT_MASK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 74 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::BIT_OPERATION; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::BLOB; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 76 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::BYTE_ORDER; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 77 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CALIBRATION_ACCESS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 78 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CALIBRATION_HANDLE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 79 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CALIBRATION_HANDLE_TEXT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 80 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CALIBRATION_METHOD; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 81 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CHARACTERISTIC; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 82 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COEFFS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COEFFS_LINEAR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 84 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPARISON_QUANTITY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 85 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPU_METHOD; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 86 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPU_TAB; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPU_TAB_REF; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPU_VTAB; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::COMPU_VTAB_RANGE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 90 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CONSISTENT_EXCHANGE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CONVERSION; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CPU_TYPE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CURVE_AXIS_REF; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CUSTOMER; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::CUSTOMER_NO; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DATA_SIZE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DEF_CHARACTERISTIC; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 98 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DEFAULT_VALUE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 99 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DEFAULT_VALUE_NUMERIC; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 100 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DEPENDENT_CHARACTERISTIC; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 101 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DEPOSIT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 102 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DISCRETE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 103 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DISPLAY_IDENTIFIER; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 104 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DIST_OP_X; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 105 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DIST_OP_Y; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 106 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DIST_OP_Z; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 107 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DIST_OP_4; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 108 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::DIST_OP_5; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 109 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ECU; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 110 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ECU_ADDRESS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 111 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ECU_ADDRESS_EXTENSION; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 112 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ECU_CALIBRATION_OFFSET; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 113 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ENCODING; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 114 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::EPK; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 115 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ERROR_MASK; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 116 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::EXTENDED_LIMITS; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 117 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_AXIS_PAR; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 118 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_AXIS_PAR_DIST; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 119 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_AXIS_PAR_LIST; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 120 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_NO_AXIS_PTS_X; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 121 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_NO_AXIS_PTS_Y; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 122 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_NO_AXIS_PTS_Z; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 123 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_NO_AXIS_PTS_4; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 124 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FIX_NO_AXIS_PTS_5; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 125 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FNC_VALUES; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 126 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FORMAT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 127 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FORMULA; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 128 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FORMULA_INV; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 129 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FRAME; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 130 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FRAME_MEASUREMENT; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 131 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FUNCTION; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 132 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FUNCTION_LIST; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 133 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::FUNCTION_VERSION; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 134 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::GROUP; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 135 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::GUARD_RAILS; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 136 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::HEADER; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 137 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::IDENTIFICATION; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 138 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::IN_MEASUREMENT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 139 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::INPUT_QUANTITY; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 140 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::INSTANCE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 141 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::LAYOUT; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 142 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::LEFT_SHIFT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 143 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::LIMITS; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 144 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::LOC_MEASUREMENT; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 145 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MAP_LIST; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 146 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MATRIX_DIM; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 147 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MAX_GRAD; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 148 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MAX_REFRESH; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 149 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MEASUREMENT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 150 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MEMORY_LAYOUT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 151 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MEMORY_SEGMENT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 152 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MOD_COMMON;  }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 153 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MOD_PAR;  }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 154 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MODEL_LINK; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 155 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MODULE;  }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 156 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::MONOTONY;  }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 157 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_AXIS_PTS_X; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 158 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_AXIS_PTS_Y; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 159 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_AXIS_PTS_Z; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 160 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_AXIS_PTS_4; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 161 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_AXIS_PTS_5; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 162 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_OF_INTERFACES; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 163 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NO_RESCALE_X; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 164 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::NUMBER; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 165 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OFFSET_X; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 166 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OFFSET_Y; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 167 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OFFSET_Z; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 168 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OFFSET_4; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 169 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OFFSET_5; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 170 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OUT_MEASUREMENT; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 171 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::OVERWRITE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 172 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::PHONE_NO; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 173 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::PHYS_UNIT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 174 "D:/projects/a2llib/src/a2lflexer.l"
{
                    found_ = true;
                    return token::PROJECT;
                  }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 178 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::PROJECT_NO; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 179 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::READ_ONLY; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 180 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::READ_WRITE; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 181 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RECORD_LAYOUT; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 182 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::REF_CHARACTERISTIC; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 183 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::REF_GROUP; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 184 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::REF_MEASUREMENT; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 185 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::REF_MEMORY_SEGMENT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 186 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::REF_UNIT; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 187 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RESERVED; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 188 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIGHT_SHIFT; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 189 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_W; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 190 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_X; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 191 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_Y; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 192 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_Z; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 193 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_4; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 194 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::RIP_ADDR_5; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 195 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::ROOT; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 196 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::S_REC_LAYOUT; } /* Deprecated */
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 197 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SHIFT_OP_X; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 198 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SHIFT_OP_Y; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 199 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SHIFT_OP_Z; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 200 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SHIFT_OP_4; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 201 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SHIFT_OP_5; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 202 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SIGN_EXTEND; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 203 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SI_EXPONENTS; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 204 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SRC_ADDR_X; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 205 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SRC_ADDR_Y; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 206 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SRC_ADDR_Z; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 207 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SRC_ADDR_4; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 208 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SRC_ADDR_5; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 209 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::STATIC_ADDRESS_OFFSETS; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 210 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::STATIC_RECORD_LAYOUT; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 211 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::STATUS_STRING_REF; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 212 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::STEP_SIZE; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 213 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::STRUCTURE_COMPONENT; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 214 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SUB_FUNCTION; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 215 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SUB_GROUP; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 216 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SUPPLIER; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 217 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SYMBOL_LINK; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 218 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SYMBOL_TYPE_LINK; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 219 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::SYSTEM_CONSTANT; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 220 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TRANSFORMER; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 221 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TRANSFORMER_IN_OBJECTS; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 222 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TRANSFORMER_OUT_OBJECTS; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 223 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TYPEDEF_AXIS; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 224 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TYPEDEF_BLOB; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 225 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TYPEDEF_CHARACTERISTIC; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 226 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TYPEDEF_MEASUREMENT; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 227 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::TYPEDEF_STRUCTURE; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 228 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::UNIT; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 229 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::UNIT_CONVERSION; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 230 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::USER; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 231 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::USER_RIGHTS; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 232 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_ADDRESS; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 233 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_CHARACTERISTIC; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 234 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_CRITERION; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 235 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_FORBIDDEN_COMB; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 236 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_MEASUREMENT; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 237 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_NAMING; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 238 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_SELECTION_CHARACTERISTIC; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 239 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VAR_SEPARATOR; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 240 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VARIANT_CODING; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 241 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::A2L_VERSION; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 242 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VIRTUAL; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 243 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::VIRTUAL_CHARACTERISTIC; }
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 245 "D:/projects/a2llib/src/a2lflexer.l"
{
                        // Read in the format specification
                        if (yylval != nullptr) {
                            yylval->emplace(ReadA2ML());
                        }
                        return token::A2ML;
                     }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 253 "D:/projects/a2llib/src/a2lflexer.l"
{
                        // Read in the if_data string
                        if (yylval != nullptr) {
                            yylval->emplace(ReadIfData());
                        }
                        return token::IF_DATA;
                       }
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 260 "D:/projects/a2llib/src/a2lflexer.l"
{
                 // Read in the if_data string until end of line
                 if(yylval != nullptr ) {
                    yylval->emplace(ReadIfDataMultiLine());
                 }
                 return token::IF_DATA;
            }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 267 "D:/projects/a2llib/src/a2lflexer.l"
{
                  // Read in the if_data string until end of line
                  if (yylval != nullptr) {
                    yylval->emplace(ReadIfDataSingleLine());
                  }
                  return token::IF_DATA;
             }
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 274 "D:/projects/a2llib/src/a2lflexer.l"
{ SkipUntil('}'); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::A2L_BEGIN; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "D:/projects/a2llib/src/a2lflexer.l"
{ return token::A2L_END; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 279 "D:/projects/a2llib/src/a2lflexer.l"
{
                    FixIncludeFile();
                 }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 285 "D:/projects/a2llib/src/a2lflexer.l"
{
                   const std::string temp(yytext);
                   if (yylval != nullptr) {
                     yylval->emplace(temp);
                   }
                   return token::IDENT;
                 }
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 293 "D:/projects/a2llib/src/a2lflexer.l"
{
                   const size_t len = strlen(yytext);
                   std::string temp;
                   if (len > 2) {
                     temp = yytext + 1;
                     temp.pop_back();
                   }
                   yylval->emplace(temp);
                   return token::STRING;
                 }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 304 "D:/projects/a2llib/src/a2lflexer.l"
{
		uint64_t address = 0;
		for ( size_t index = 0; yytext[ index ] != '\0'; ++index ) {
			if ( index < 2 ) continue;
			const char token = yytext[index];
			switch ( token ) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				address *= 16;
				address += token - '0';
				break;

			case 'A':
			case 'B':
			case 'C':
			case 'D':
			case 'E':
			case 'F':
				address *= 16;
				address += token - 'A' + 10;
				break;

			case 'a':
			case 'b':
			case 'c':
			case 'd':
			case 'e':
			case 'f':
				address *= 16;
				address += token - 'a' + 10;
				break;

			default:
				break;
			}
		}

		yylval->emplace(address);
	    return token::HEX;
    }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 352 "D:/projects/a2llib/src/a2lflexer.l"
{
                    uint64_t temp = 0;
                    try {
                      temp = std::stoull(yytext);
                    } catch (const std::exception& ) {

                    }
                    yylval->emplace(temp);
                    return token::UINT;
                  }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 362 "D:/projects/a2llib/src/a2lflexer.l"
{
                     int64_t temp = 0;
                     try {
                       temp = std::stoll(yytext);
                     } catch (const std::exception& ) {

                     }
                     yylval->emplace(temp);
                     return token::INT;
                   }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 372 "D:/projects/a2llib/src/a2lflexer.l"
{
                   double temp = 0.0;
                   try {
                     temp = std::stod(yytext);
                   } catch (const std::exception&) {

                   }
                   yylval->emplace<double>(temp);
                   return token::FLOAT;
                 }
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 383 "D:/projects/a2llib/src/a2lflexer.l"
{ } /* Multi line comments */
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 384 "D:/projects/a2llib/src/a2lflexer.l"
{ /* Single line comment  */ }
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 385 "D:/projects/a2llib/src/a2lflexer.l"
{}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 386 "D:/projects/a2llib/src/a2lflexer.l"
{}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PRI):
case YY_STATE_EOF(VERSION):
case YY_STATE_EOF(TIMESTAMP):
case YY_STATE_EOF(HOSTNAME):
case YY_STATE_EOF(APPNAME):
case YY_STATE_EOF(PROCID):
case YY_STATE_EOF(MSGID):
case YY_STATE_EOF(SD):
case YY_STATE_EOF(SDELEMENT):
case YY_STATE_EOF(SDPAR):
case YY_STATE_EOF(SDVALUE):
case YY_STATE_EOF(MSG):
#line 387 "D:/projects/a2llib/src/a2lflexer.l"
{
            if (file_stack_.size() <= 1) {
                yyterminate();
            } else {
                auto& last_item = file_stack_.back();
                yy_delete_buffer(last_item.buffer_state);
                file_stack_.pop_back();
                auto& current_item = file_stack_.back();
                yy_switch_to_buffer(current_item.buffer_state);
            }
        }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 398 "D:/projects/a2llib/src/a2lflexer.l"
ECHO;
	YY_BREAK
#line 2978 "D:/projects/a2llib/src/a2lflexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1542 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1542 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1541);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 398 "D:/projects/a2llib/src/a2lflexer.l"




